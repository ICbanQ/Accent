
AtmelFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000008e0  00000974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000031  00800092  00800092  000009a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000065c  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002a1  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000323  00000000  00000000  00001371  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00001694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000303  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000519  00000000  00000000  00001af3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	3d c0       	rjmp	.+122    	; 0x82 <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ee       	ldi	r30, 0xE0	; 224
  3a:	f8 e0       	ldi	r31, 0x08	; 8
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 39       	cpi	r26, 0x92	; 146
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e9       	ldi	r26, 0x92	; 146
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 3c       	cpi	r26, 0xC3	; 195
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	b2 d3       	rcall	.+1892   	; 0x7be <main>
  5a:	40 c4       	rjmp	.+2176   	; 0x8dc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_6>:
unsigned char bps_index = 0;


// Clear pulse to all servos
ISR (TIMER1_COMPA_vect)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
	PORTD &= ~0xFC;  // Clear all but two lowest on port D..
  6a:	82 b3       	in	r24, 0x12	; 18
  6c:	83 70       	andi	r24, 0x03	; 3
  6e:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~0x03;  // ..and lowest two on port C.
  70:	85 b3       	in	r24, 0x15	; 21
  72:	8c 7f       	andi	r24, 0xFC	; 252
  74:	85 bb       	out	0x15, r24	; 21
}
  76:	8f 91       	pop	r24
  78:	0f 90       	pop	r0
  7a:	0f be       	out	0x3f, r0	; 63
  7c:	0f 90       	pop	r0
  7e:	1f 90       	pop	r1
  80:	18 95       	reti

00000082 <__vector_3>:



// Get pulse length for current servo and set up timer1 for it and set correct pin high.
ISR (TIMER2_COMP_vect)
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	2f 93       	push	r18
  8e:	3f 93       	push	r19
  90:	4f 93       	push	r20
  92:	5f 93       	push	r21
  94:	8f 93       	push	r24
  96:	9f 93       	push	r25
  98:	ef 93       	push	r30
  9a:	ff 93       	push	r31
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	00 d0       	rcall	.+0      	; 0xa2 <__vector_3+0x20>
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
	static volatile unsigned char current_servo = 0;  // Just used here, volatile not needed?
	volatile unsigned char tmpD;
	volatile unsigned char tmpC;

	if(uFlags.changeoutput == TRUE)
  a6:	80 91 b2 00 	lds	r24, 0x00B2
  aa:	80 ff       	sbrs	r24, 0
  ac:	09 c0       	rjmp	.+18     	; 0xc0 <__vector_3+0x3e>
	{
		uFlags.changeoutput = FALSE;
  ae:	e2 eb       	ldi	r30, 0xB2	; 178
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	80 83       	st	Z, r24
		if(uFlags.outputenabled)
  b6:	81 ff       	sbrs	r24, 1
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__vector_3+0x3c>
		PORTC &= ~0x08; //Enable 741.
  ba:	ab 98       	cbi	0x15, 3	; 21
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <__vector_3+0x3e>
		else
		PORTC |= 0x08;  //Disable 741.
  be:	ab 9a       	sbi	0x15, 3	; 21
	}
	
	// TCNT2 = 0x00; Not needed?  CTC should fix this.
	TIFR |= (1 << OCF1A);
  c0:	88 b7       	in	r24, 0x38	; 56
  c2:	80 61       	ori	r24, 0x10	; 16
  c4:	88 bf       	out	0x38, r24	; 56
	current_servo = (current_servo + 1) & 0x07;
  c6:	80 91 95 00 	lds	r24, 0x0095
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	87 70       	andi	r24, 0x07	; 7
  ce:	80 93 95 00 	sts	0x0095, r24
	tmpD = ((1 << current_servo) & 0xFC);
  d2:	20 91 95 00 	lds	r18, 0x0095
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	ac 01       	movw	r20, r24
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <__vector_3+0x60>
  de:	44 0f       	add	r20, r20
  e0:	55 1f       	adc	r21, r21
  e2:	2a 95       	dec	r18
  e4:	e2 f7       	brpl	.-8      	; 0xde <__vector_3+0x5c>
  e6:	9a 01       	movw	r18, r20
  e8:	2c 7f       	andi	r18, 0xFC	; 252
  ea:	29 83       	std	Y+1, r18	; 0x01
	tmpC = ((1 << current_servo) & 0x03) | (PORTC & 0x38);  // Dont touch output pins and enable/disable 741
  ec:	30 91 95 00 	lds	r19, 0x0095
  f0:	25 b3       	in	r18, 0x15	; 21
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <__vector_3+0x76>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	3a 95       	dec	r19
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <__vector_3+0x72>
  fc:	83 70       	andi	r24, 0x03	; 3
  fe:	92 2f       	mov	r25, r18
 100:	98 73       	andi	r25, 0x38	; 56
 102:	89 2b       	or	r24, r25
 104:	8a 83       	std	Y+2, r24	; 0x02
	OCR1A = servo[current_servo] - 17;  // -17 is for interrupt time, choosen oscilloscope measurment.
 106:	e0 91 95 00 	lds	r30, 0x0095
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	ed 59       	subi	r30, 0x9D	; 157
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	80 81       	ld	r24, Z
 116:	91 81       	ldd	r25, Z+1	; 0x01
 118:	41 97       	sbiw	r24, 0x11	; 17
 11a:	9b bd       	out	0x2b, r25	; 43
 11c:	8a bd       	out	0x2a, r24	; 42
	
	TCNT1 = 0x0000;
 11e:	1d bc       	out	0x2d, r1	; 45
 120:	1c bc       	out	0x2c, r1	; 44
	PORTD = tmpD;
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	82 bb       	out	0x12, r24	; 18
	PORTC = tmpC;
 126:	8a 81       	ldd	r24, Y+2	; 0x02
 128:	85 bb       	out	0x15, r24	; 21
}
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <setup_usart>:
}



void setup_usart(unsigned short speed)
{
 14c:	9c 01       	movw	r18, r24
	//Default to disable fast mode
	UCSRA &= ~_BV(U2X);
 14e:	59 98       	cbi	0x0b, 1	; 11
	//disable receiver and transmitter
	UCSRB &= ~(1<<RXEN) & ~(1<<TXEN);
 150:	9a b1       	in	r25, 0x0a	; 10
 152:	97 7e       	andi	r25, 0xE7	; 231
 154:	9a b9       	out	0x0a, r25	; 10

	switch(speed)
 156:	21 30       	cpi	r18, 0x01	; 1
 158:	31 05       	cpc	r19, r1
 15a:	59 f0       	breq	.+22     	; 0x172 <setup_usart+0x26>
 15c:	38 f0       	brcs	.+14     	; 0x16c <setup_usart+0x20>
 15e:	22 30       	cpi	r18, 0x02	; 2
 160:	31 05       	cpc	r19, r1
 162:	51 f0       	breq	.+20     	; 0x178 <setup_usart+0x2c>
 164:	26 30       	cpi	r18, 0x06	; 6
 166:	31 05       	cpc	r19, r1
 168:	59 f0       	breq	.+22     	; 0x180 <setup_usart+0x34>
 16a:	0d c0       	rjmp	.+26     	; 0x186 <setup_usart+0x3a>
	{
		case USART_BPS_9600:
		UBRRL = 25;
 16c:	89 e1       	ldi	r24, 0x19	; 25
 16e:	89 b9       	out	0x09, r24	; 9
		break;
 170:	0f c0       	rjmp	.+30     	; 0x190 <setup_usart+0x44>
		case USART_BPS_19200:
		UBRRL = 12;
 172:	8c e0       	ldi	r24, 0x0C	; 12
 174:	89 b9       	out	0x09, r24	; 9
		break;
 176:	0c c0       	rjmp	.+24     	; 0x190 <setup_usart+0x44>
		case USART_BPS_38400:
		//Enable fast mode.
		UCSRA |= _BV(U2X);
 178:	59 9a       	sbi	0x0b, 1	; 11
		UBRRL = 12;
 17a:	8c e0       	ldi	r24, 0x0C	; 12
 17c:	89 b9       	out	0x09, r24	; 9
		break;
 17e:	08 c0       	rjmp	.+16     	; 0x190 <setup_usart+0x44>
		/*  case USART_BPS_230400:
		UBRRL = ;
		break;  */
		case USART_BPS_500000:  //Untested! main-loop to slow?
		//Enable fast mode.
		UCSRA |= _BV(U2X);
 180:	59 9a       	sbi	0x0b, 1	; 11
		UBRRL = 0;
 182:	19 b8       	out	0x09, r1	; 9
		break;
 184:	05 c0       	rjmp	.+10     	; 0x190 <setup_usart+0x44>
		default:
		uFlags.send_NACK = 1;
 186:	e1 eb       	ldi	r30, 0xB1	; 177
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	80 83       	st	Z, r24
		break;
	}

	//enable receiver and transmitter
	UCSRB |= (1<<RXEN) |(1<<TXEN);
 190:	8a b1       	in	r24, 0x0a	; 10
 192:	88 61       	ori	r24, 0x18	; 24
 194:	8a b9       	out	0x0a, r24	; 10
 196:	08 95       	ret

00000198 <promille_to_timer>:



//With current crystal and timer settings 4000 timer steps is 1ms pulse, 8000 timer steps is 2ms pulse.
unsigned short promille_to_timer(signed short promille)
{
 198:	8d 36       	cpi	r24, 0x6D	; 109
 19a:	27 e0       	ldi	r18, 0x07	; 7
 19c:	92 07       	cpc	r25, r18
 19e:	14 f0       	brlt	.+4      	; 0x1a4 <promille_to_timer+0xc>
 1a0:	8c e6       	ldi	r24, 0x6C	; 108
 1a2:	97 e0       	ldi	r25, 0x07	; 7
 1a4:	8c 33       	cpi	r24, 0x3C	; 60
 1a6:	26 ef       	ldi	r18, 0xF6	; 246
 1a8:	92 07       	cpc	r25, r18
 1aa:	14 f4       	brge	.+4      	; 0x1b0 <promille_to_timer+0x18>
 1ac:	8c e3       	ldi	r24, 0x3C	; 60
 1ae:	96 ef       	ldi	r25, 0xF6	; 246
	promille = -2500;
	else if(promille>1900)
	promille = 1900;

	// Less code than promille*2+6000 ?
	return (promille+promille+6000);
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
}
 1b4:	80 59       	subi	r24, 0x90	; 144
 1b6:	98 4e       	sbci	r25, 0xE8	; 232
 1b8:	08 95       	ret

000001ba <Process_handler>:



void Process_handler(void)
{
 1ba:	8f 92       	push	r8
 1bc:	9f 92       	push	r9
 1be:	af 92       	push	r10
 1c0:	bf 92       	push	r11
 1c2:	cf 92       	push	r12
 1c4:	df 92       	push	r13
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	cf 93       	push	r28
	unsigned char i;
	unsigned char tickflag = 0;

	if(TCNT0 > 78)  // Only correct in theory, needs adjustment.
 1cc:	82 b7       	in	r24, 0x32	; 50
 1ce:	8f 34       	cpi	r24, 0x4F	; 79
 1d0:	08 f4       	brcc	.+2      	; 0x1d4 <Process_handler+0x1a>
 1d2:	b2 c0       	rjmp	.+356    	; 0x338 <Process_handler+0x17e>
	{
		TCNT0 = 0x00;
 1d4:	12 be       	out	0x32, r1	; 50
		tickflag = 1;
	}

	//Update servo movement every 200us.
	if(uFlags.run_test && tickflag)
 1d6:	80 91 b1 00 	lds	r24, 0x00B1
 1da:	84 ff       	sbrs	r24, 4
 1dc:	37 c0       	rjmp	.+110    	; 0x24c <Process_handler+0x92>
		unsigned char i;
		static unsigned char dir = 1;
		static unsigned short tmp=6000;

		for(i=0;i<8;i++)
		servo[i] = tmp;
 1de:	20 91 61 00 	lds	r18, 0x0061
 1e2:	30 91 62 00 	lds	r19, 0x0062
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	fc 01       	movw	r30, r24
 1ec:	ee 0f       	add	r30, r30
 1ee:	ff 1f       	adc	r31, r31
 1f0:	ed 59       	subi	r30, 0x9D	; 157
 1f2:	ff 4f       	sbci	r31, 0xFF	; 255
 1f4:	31 83       	std	Z+1, r19	; 0x01
 1f6:	20 83       	st	Z, r18
 1f8:	01 96       	adiw	r24, 0x01	; 1
	{
		unsigned char i;
		static unsigned char dir = 1;
		static unsigned short tmp=6000;

		for(i=0;i<8;i++)
 1fa:	88 30       	cpi	r24, 0x08	; 8
 1fc:	91 05       	cpc	r25, r1
 1fe:	a9 f7       	brne	.-22     	; 0x1ea <Process_handler+0x30>
		servo[i] = tmp;

		if(tmp >= 8000)
 200:	80 91 61 00 	lds	r24, 0x0061
 204:	90 91 62 00 	lds	r25, 0x0062
 208:	80 34       	cpi	r24, 0x40	; 64
 20a:	2f e1       	ldi	r18, 0x1F	; 31
 20c:	92 07       	cpc	r25, r18
 20e:	38 f0       	brcs	.+14     	; 0x21e <Process_handler+0x64>
		dir = 0;
 210:	10 92 60 00 	sts	0x0060, r1
		if(tmp <= 4000)
 214:	81 3a       	cpi	r24, 0xA1	; 161
 216:	ef e0       	ldi	r30, 0x0F	; 15
 218:	9e 07       	cpc	r25, r30
 21a:	28 f0       	brcs	.+10     	; 0x226 <Process_handler+0x6c>
 21c:	12 c0       	rjmp	.+36     	; 0x242 <Process_handler+0x88>
 21e:	81 3a       	cpi	r24, 0xA1	; 161
 220:	ff e0       	ldi	r31, 0x0F	; 15
 222:	9f 07       	cpc	r25, r31
 224:	20 f4       	brcc	.+8      	; 0x22e <Process_handler+0x74>
		dir = 1;
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	20 93 60 00 	sts	0x0060, r18
 22c:	04 c0       	rjmp	.+8      	; 0x236 <Process_handler+0x7c>

		if(dir == 1)
 22e:	20 91 60 00 	lds	r18, 0x0060
 232:	21 30       	cpi	r18, 0x01	; 1
 234:	31 f4       	brne	.+12     	; 0x242 <Process_handler+0x88>
		tmp = tmp+10;
 236:	0a 96       	adiw	r24, 0x0a	; 10
 238:	90 93 62 00 	sts	0x0062, r25
 23c:	80 93 61 00 	sts	0x0061, r24
 240:	05 c0       	rjmp	.+10     	; 0x24c <Process_handler+0x92>
		else
		tmp = tmp-10;
 242:	0a 97       	sbiw	r24, 0x0a	; 10
 244:	90 93 62 00 	sts	0x0062, r25
 248:	80 93 61 00 	sts	0x0061, r24
 24c:	a3 e7       	ldi	r26, 0x73	; 115
 24e:	b0 e0       	ldi	r27, 0x00	; 0
		unsigned char i;
		static unsigned char dir = 1;
		static unsigned short tmp=6000;

		for(i=0;i<8;i++)
		servo[i] = tmp;
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
	if(tickflag)
	{
		tickflag = 0;
		for(i=0;i<8;i++)
		{
			if(servo[i] != servo_target[i])  // Not yet at target?
 254:	9c 01       	movw	r18, r24
 256:	fc 01       	movw	r30, r24
 258:	ee 0f       	add	r30, r30
 25a:	ff 1f       	adc	r31, r31
 25c:	ed 59       	subi	r30, 0x9D	; 157
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	60 81       	ld	r22, Z
 262:	71 81       	ldd	r23, Z+1	; 0x01
 264:	4d 91       	ld	r20, X+
 266:	5d 91       	ld	r21, X+
 268:	64 17       	cp	r22, r20
 26a:	75 07       	cpc	r23, r21
 26c:	09 f4       	brne	.+2      	; 0x270 <Process_handler+0xb6>
 26e:	5f c0       	rjmp	.+190    	; 0x32e <Process_handler+0x174>
 270:	fc 01       	movw	r30, r24
 272:	e9 56       	subi	r30, 0x69	; 105
 274:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				//No
				if(servo_step[i] != 0)   // Supposed to update?
 276:	c0 81       	ld	r28, Z
 278:	cc 23       	and	r28, r28
 27a:	09 f4       	brne	.+2      	; 0x27e <Process_handler+0xc4>
 27c:	58 c0       	rjmp	.+176    	; 0x32e <Process_handler+0x174>
				{
					//Yes
					if(abs((servo_target[i] - (signed long)servo[i])) <= (signed long)servo_step[i])  // One step is bigger than remaining distance to target?
 27e:	fc 01       	movw	r30, r24
 280:	ee 0f       	add	r30, r30
 282:	ff 1f       	adc	r31, r31
 284:	ed 59       	subi	r30, 0x9D	; 157
 286:	ff 4f       	sbci	r31, 0xFF	; 255
 288:	60 81       	ld	r22, Z
 28a:	71 81       	ldd	r23, Z+1	; 0x01
 28c:	fa 01       	movw	r30, r20
 28e:	e6 1b       	sub	r30, r22
 290:	f7 0b       	sbc	r31, r23
 292:	6f 01       	movw	r12, r30
 294:	22 f4       	brpl	.+8      	; 0x29e <Process_handler+0xe4>
 296:	cc 24       	eor	r12, r12
 298:	dd 24       	eor	r13, r13
 29a:	ce 1a       	sub	r12, r30
 29c:	df 0a       	sbc	r13, r31
 29e:	0d 2c       	mov	r0, r13
 2a0:	00 0c       	add	r0, r0
 2a2:	ee 08       	sbc	r14, r14
 2a4:	ff 08       	sbc	r15, r15
 2a6:	8c 2e       	mov	r8, r28
 2a8:	91 2c       	mov	r9, r1
 2aa:	a1 2c       	mov	r10, r1
 2ac:	b1 2c       	mov	r11, r1
 2ae:	8c 14       	cp	r8, r12
 2b0:	9d 04       	cpc	r9, r13
 2b2:	ae 04       	cpc	r10, r14
 2b4:	bf 04       	cpc	r11, r15
 2b6:	3c f0       	brlt	.+14     	; 0x2c6 <Process_handler+0x10c>
					servo[i] = servo_target[i];  // Yes - just set servo to target, done!
 2b8:	f9 01       	movw	r30, r18
 2ba:	ee 0f       	add	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	ed 59       	subi	r30, 0x9D	; 157
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	51 83       	std	Z+1, r21	; 0x01
 2c4:	40 83       	st	Z, r20

					if(servo[i] != servo_target[i]) // Are we there yet?
 2c6:	f9 01       	movw	r30, r18
 2c8:	ee 0f       	add	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	ed 59       	subi	r30, 0x9D	; 157
 2ce:	ff 4f       	sbci	r31, 0xFF	; 255
 2d0:	60 81       	ld	r22, Z
 2d2:	71 81       	ldd	r23, Z+1	; 0x01
 2d4:	46 17       	cp	r20, r22
 2d6:	57 07       	cpc	r21, r23
 2d8:	51 f1       	breq	.+84     	; 0x32e <Process_handler+0x174>
					{
						//No - Move servo in correct direction
						if((servo_target[i] - (signed long)servo[i]) > 0)
 2da:	f9 01       	movw	r30, r18
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	ed 59       	subi	r30, 0x9D	; 157
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	01 90       	ld	r0, Z+
 2e6:	f0 81       	ld	r31, Z
 2e8:	e0 2d       	mov	r30, r0
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	4e 1b       	sub	r20, r30
 2f0:	5f 0b       	sbc	r21, r31
 2f2:	61 09       	sbc	r22, r1
 2f4:	71 09       	sbc	r23, r1
 2f6:	14 16       	cp	r1, r20
 2f8:	15 06       	cpc	r1, r21
 2fa:	16 06       	cpc	r1, r22
 2fc:	17 06       	cpc	r1, r23
 2fe:	64 f4       	brge	.+24     	; 0x318 <Process_handler+0x15e>
						servo[i] += (servo_step[i]);
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	f9 01       	movw	r30, r18
 306:	ed 59       	subi	r30, 0x9D	; 157
 308:	ff 4f       	sbci	r31, 0xFF	; 255
 30a:	20 81       	ld	r18, Z
 30c:	31 81       	ldd	r19, Z+1	; 0x01
 30e:	2c 0f       	add	r18, r28
 310:	31 1d       	adc	r19, r1
 312:	31 83       	std	Z+1, r19	; 0x01
 314:	20 83       	st	Z, r18
 316:	0b c0       	rjmp	.+22     	; 0x32e <Process_handler+0x174>
						else
						servo[i] -= (servo_step[i]);
 318:	22 0f       	add	r18, r18
 31a:	33 1f       	adc	r19, r19
 31c:	f9 01       	movw	r30, r18
 31e:	ed 59       	subi	r30, 0x9D	; 157
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	20 81       	ld	r18, Z
 324:	31 81       	ldd	r19, Z+1	; 0x01
 326:	2c 1b       	sub	r18, r28
 328:	31 09       	sbc	r19, r1
 32a:	31 83       	std	Z+1, r19	; 0x01
 32c:	20 83       	st	Z, r18
 32e:	01 96       	adiw	r24, 0x01	; 1

	// Promille / ms
	if(tickflag)
	{
		tickflag = 0;
		for(i=0;i<8;i++)
 330:	88 30       	cpi	r24, 0x08	; 8
 332:	91 05       	cpc	r25, r1
 334:	09 f0       	breq	.+2      	; 0x338 <Process_handler+0x17e>
 336:	8e cf       	rjmp	.-228    	; 0x254 <Process_handler+0x9a>
			}

		}
	}

}
 338:	cf 91       	pop	r28
 33a:	ff 90       	pop	r15
 33c:	ef 90       	pop	r14
 33e:	df 90       	pop	r13
 340:	cf 90       	pop	r12
 342:	bf 90       	pop	r11
 344:	af 90       	pop	r10
 346:	9f 90       	pop	r9
 348:	8f 90       	pop	r8
 34a:	08 95       	ret

0000034c <RX_handler>:



void RX_handler(void)
{
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
	static unsigned char n = 0;
	unsigned char rx;
	unsigned char i;

	// Have we received a new byte?
	if ( (UCSRA & (1<<RXC)) )
 350:	5f 9b       	sbis	0x0b, 7	; 11
 352:	99 c0       	rjmp	.+306    	; 0x486 <__stack+0x27>
	{
		// Get byte from HW serial rx register..
		rx = UDR;
 354:	cc b1       	in	r28, 0x0c	; 12
		
		// A command always start with "s" and can not contain an "s".
		if(rx == 's')
 356:	c3 37       	cpi	r28, 0x73	; 115
 358:	b1 f4       	brne	.+44     	; 0x386 <RX_handler+0x3a>
 35a:	e0 ea       	ldi	r30, 0xA0	; 160
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 eb       	ldi	r24, 0xB0	; 176
 360:	90 e0       	ldi	r25, 0x00	; 0
		{
			for(i=0;i<8;i++)
			{
				param[i] = 0;
 362:	11 92       	st	Z+, r1
 364:	11 92       	st	Z+, r1
		rx = UDR;
		
		// A command always start with "s" and can not contain an "s".
		if(rx == 's')
		{
			for(i=0;i<8;i++)
 366:	e8 17       	cp	r30, r24
 368:	f9 07       	cpc	r31, r25
 36a:	d9 f7       	brne	.-10     	; 0x362 <RX_handler+0x16>
			{
				param[i] = 0;
			}
			n = 0;
 36c:	10 92 94 00 	sts	0x0094, r1
			bufpos = 0;
 370:	10 92 9f 00 	sts	0x009F, r1
			state = REC_CMD;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 b0 00 	sts	0x00B0, r24
			uFlags.ignore_ws = 0;
 37a:	e1 eb       	ldi	r30, 0xB1	; 177
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	8f 7b       	andi	r24, 0xBF	; 191
 382:	80 83       	st	Z, r24
 384:	06 c0       	rjmp	.+12     	; 0x392 <RX_handler+0x46>
		}

		if(rx == ' ' && uFlags.ignore_ws)
 386:	c0 32       	cpi	r28, 0x20	; 32
 388:	21 f4       	brne	.+8      	; 0x392 <RX_handler+0x46>
 38a:	80 91 b1 00 	lds	r24, 0x00B1
 38e:	86 fd       	sbrc	r24, 6
 390:	7a c0       	rjmp	.+244    	; 0x486 <__stack+0x27>
		{
			// Do nothing.
		}
		else if(state != IDLE)
 392:	80 91 b0 00 	lds	r24, 0x00B0
 396:	88 23       	and	r24, r24
 398:	09 f4       	brne	.+2      	; 0x39c <RX_handler+0x50>
 39a:	75 c0       	rjmp	.+234    	; 0x486 <__stack+0x27>
		{
			uFlags.ignore_ws = 0;
 39c:	e1 eb       	ldi	r30, 0xB1	; 177
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	90 81       	ld	r25, Z
 3a2:	9f 7b       	andi	r25, 0xBF	; 191
 3a4:	90 83       	st	Z, r25

			if(bufpos < INPUT_BUFFER_SIZE)
 3a6:	e0 91 9f 00 	lds	r30, 0x009F
 3aa:	e8 30       	cpi	r30, 0x08	; 8
 3ac:	08 f0       	brcs	.+2      	; 0x3b0 <RX_handler+0x64>
 3ae:	62 c0       	rjmp	.+196    	; 0x474 <__stack+0x15>
			{
				if((rx >= 'a' && rx <= 'z') || (rx >= '0' && rx <= '9') || rx == '-' || rx == '+')
 3b0:	9f e9       	ldi	r25, 0x9F	; 159
 3b2:	9c 0f       	add	r25, r28
 3b4:	9a 31       	cpi	r25, 0x1A	; 26
 3b6:	40 f0       	brcs	.+16     	; 0x3c8 <RX_handler+0x7c>
 3b8:	90 ed       	ldi	r25, 0xD0	; 208
 3ba:	9c 0f       	add	r25, r28
 3bc:	9a 30       	cpi	r25, 0x0A	; 10
 3be:	20 f0       	brcs	.+8      	; 0x3c8 <RX_handler+0x7c>
 3c0:	cd 32       	cpi	r28, 0x2D	; 45
 3c2:	11 f0       	breq	.+4      	; 0x3c8 <RX_handler+0x7c>
 3c4:	cb 32       	cpi	r28, 0x2B	; 43
 3c6:	41 f4       	brne	.+16     	; 0x3d8 <RX_handler+0x8c>
				{
					buf[bufpos++] = rx;	
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	9e 0f       	add	r25, r30
 3cc:	90 93 9f 00 	sts	0x009F, r25
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	ed 54       	subi	r30, 0x4D	; 77
 3d4:	ff 4f       	sbci	r31, 0xFF	; 255
 3d6:	c0 83       	st	Z, r28
				}
				

				if(rx == ' ' || rx == '\r' || rx == '\n' || rx == '#')
 3d8:	c0 32       	cpi	r28, 0x20	; 32
 3da:	39 f0       	breq	.+14     	; 0x3ea <RX_handler+0x9e>
 3dc:	cd 30       	cpi	r28, 0x0D	; 13
 3de:	29 f0       	breq	.+10     	; 0x3ea <RX_handler+0x9e>
 3e0:	ca 30       	cpi	r28, 0x0A	; 10
 3e2:	19 f0       	breq	.+6      	; 0x3ea <RX_handler+0x9e>
 3e4:	c3 32       	cpi	r28, 0x23	; 35
 3e6:	09 f0       	breq	.+2      	; 0x3ea <RX_handler+0x9e>
 3e8:	4e c0       	rjmp	.+156    	; 0x486 <__stack+0x27>
				{
			
					buf[bufpos] = '\0';
 3ea:	90 91 9f 00 	lds	r25, 0x009F
 3ee:	e9 2f       	mov	r30, r25
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	ed 54       	subi	r30, 0x4D	; 77
 3f4:	ff 4f       	sbci	r31, 0xFF	; 255
 3f6:	10 82       	st	Z, r1

					if(state == REC_CMD)
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	a1 f4       	brne	.+40     	; 0x424 <RX_handler+0xd8>
					{
						
						// save cmd for execution
						for(i=0;i<bufpos;i++)
 3fc:	99 23       	and	r25, r25
 3fe:	71 f0       	breq	.+28     	; 0x41c <RX_handler+0xd0>
 400:	e3 eb       	ldi	r30, 0xB3	; 179
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	ab eb       	ldi	r26, 0xBB	; 187
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	91 50       	subi	r25, 0x01	; 1
 40a:	89 2f       	mov	r24, r25
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	8c 54       	subi	r24, 0x4C	; 76
 410:	9f 4f       	sbci	r25, 0xFF	; 255
						{
							cmd[i] = buf[i];
 412:	21 91       	ld	r18, Z+
 414:	2d 93       	st	X+, r18

					if(state == REC_CMD)
					{
						
						// save cmd for execution
						for(i=0;i<bufpos;i++)
 416:	e8 17       	cp	r30, r24
 418:	f9 07       	cpc	r31, r25
 41a:	d9 f7       	brne	.-10     	; 0x412 <RX_handler+0xc6>
						{
							cmd[i] = buf[i];
						}
						state = REC_DATA;
 41c:	82 e0       	ldi	r24, 0x02	; 2
 41e:	80 93 b0 00 	sts	0x00B0, r24
 422:	13 c0       	rjmp	.+38     	; 0x44a <RX_handler+0xfe>
					}
					else // if(state == REC_DATA)
					{
						if(n<8)
 424:	d0 91 94 00 	lds	r29, 0x0094
 428:	d8 30       	cpi	r29, 0x08	; 8
 42a:	78 f4       	brcc	.+30     	; 0x44a <RX_handler+0xfe>
						{
							// parse parameter and save for execution
							param[n++] = atoi((char *)buf);
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	8d 0f       	add	r24, r29
 430:	80 93 94 00 	sts	0x0094, r24
 434:	83 eb       	ldi	r24, 0xB3	; 179
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	07 d2       	rcall	.+1038   	; 0x848 <atoi>
 43a:	ed 2f       	mov	r30, r29
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	e0 56       	subi	r30, 0x60	; 96
 444:	ff 4f       	sbci	r31, 0xFF	; 255
 446:	91 83       	std	Z+1, r25	; 0x01
 448:	80 83       	st	Z, r24
						}
					}

					uFlags.ignore_ws = 1;
 44a:	e1 eb       	ldi	r30, 0xB1	; 177
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	80 64       	ori	r24, 0x40	; 64
 452:	80 83       	st	Z, r24
					bufpos = 0;
 454:	10 92 9f 00 	sts	0x009F, r1
				}

				if(rx == '\r' || rx == '\n' || rx == '#')
 458:	cd 30       	cpi	r28, 0x0D	; 13
 45a:	21 f0       	breq	.+8      	; 0x464 <__stack+0x5>
 45c:	ca 30       	cpi	r28, 0x0A	; 10
 45e:	11 f0       	breq	.+4      	; 0x464 <__stack+0x5>
 460:	c3 32       	cpi	r28, 0x23	; 35
 462:	89 f4       	brne	.+34     	; 0x486 <__stack+0x27>
				{
					// Run command.
					uFlags.exec_CMD = 1;
 464:	e1 eb       	ldi	r30, 0xB1	; 177
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	81 60       	ori	r24, 0x01	; 1
 46c:	80 83       	st	Z, r24
					state = IDLE;
 46e:	10 92 b0 00 	sts	0x00B0, r1
 472:	09 c0       	rjmp	.+18     	; 0x486 <__stack+0x27>

			}
			else
			{
				// Message part is to long
				bufpos = 0;
 474:	10 92 9f 00 	sts	0x009F, r1
				state = IDLE;
 478:	10 92 b0 00 	sts	0x00B0, r1
				uFlags.send_NACK = 1;
 47c:	e1 eb       	ldi	r30, 0xB1	; 177
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	84 60       	ori	r24, 0x04	; 4
 484:	80 83       	st	Z, r24
			}
		}

	}
}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <TX_handler>:

void TX_handler(void)
{
	static unsigned char const *cur;

	if(uFlags.send_VER)
 48c:	80 91 b1 00 	lds	r24, 0x00B1
 490:	83 ff       	sbrs	r24, 3
 492:	0b c0       	rjmp	.+22     	; 0x4aa <TX_handler+0x1e>
	{
		uFlags.send_VER = 0;
 494:	e1 eb       	ldi	r30, 0xB1	; 177
 496:	f0 e0       	ldi	r31, 0x00	; 0
		uFlags.TX = 1;
 498:	87 7f       	andi	r24, 0xF7	; 247
 49a:	80 68       	ori	r24, 0x80	; 128
 49c:	80 83       	st	Z, r24

		cur = (unsigned char *)VERSION_STR;
 49e:	85 e8       	ldi	r24, 0x85	; 133
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	90 93 93 00 	sts	0x0093, r25
 4a6:	80 93 92 00 	sts	0x0092, r24
	}

	if(uFlags.send_ACK)
 4aa:	80 91 b1 00 	lds	r24, 0x00B1
 4ae:	81 ff       	sbrs	r24, 1
 4b0:	0e c0       	rjmp	.+28     	; 0x4ce <TX_handler+0x42>
	{
		uFlags.send_ACK = 0;
 4b2:	e1 eb       	ldi	r30, 0xB1	; 177
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
		uFlags.TX = 1;
 4b6:	8d 7f       	andi	r24, 0xFD	; 253
 4b8:	80 68       	ori	r24, 0x80	; 128
 4ba:	80 83       	st	Z, r24

		cur = ACK_STR;
 4bc:	80 91 83 00 	lds	r24, 0x0083
 4c0:	90 91 84 00 	lds	r25, 0x0084
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	90 93 93 00 	sts	0x0093, r25
 4ca:	80 93 92 00 	sts	0x0092, r24
	}

	if(uFlags.send_NACK)
 4ce:	80 91 b1 00 	lds	r24, 0x00B1
 4d2:	82 ff       	sbrs	r24, 2
 4d4:	0d c0       	rjmp	.+26     	; 0x4f0 <TX_handler+0x64>
	{
		uFlags.send_NACK = 0;
 4d6:	e1 eb       	ldi	r30, 0xB1	; 177
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
		uFlags.TX = 1;
 4da:	8b 7f       	andi	r24, 0xFB	; 251
 4dc:	80 68       	ori	r24, 0x80	; 128
 4de:	80 83       	st	Z, r24

		cur = NACK_STR;
 4e0:	80 91 83 00 	lds	r24, 0x0083
 4e4:	90 91 84 00 	lds	r25, 0x0084
 4e8:	90 93 93 00 	sts	0x0093, r25
 4ec:	80 93 92 00 	sts	0x0092, r24
	}

	if(uFlags.TX)
 4f0:	80 91 b1 00 	lds	r24, 0x00B1
 4f4:	88 23       	and	r24, r24
 4f6:	04 f5       	brge	.+64     	; 0x538 <TX_handler+0xac>
	{
		if(*cur != '\0') //Any char to send?
 4f8:	e0 91 92 00 	lds	r30, 0x0092
 4fc:	f0 91 93 00 	lds	r31, 0x0093
 500:	80 81       	ld	r24, Z
 502:	88 23       	and	r24, r24
 504:	99 f0       	breq	.+38     	; 0x52c <TX_handler+0xa0>
		{
			// yes!
			if( UCSRA & (1<<UDRE) ) // Anything being sent now?
 506:	5d 9b       	sbis	0x0b, 5	; 11
 508:	25 c0       	rjmp	.+74     	; 0x554 <TX_handler+0xc8>
			{
				// No! we can send!
				UCSRA |= (1<<TXC);  // CLEAR TXC before trying to send something. (clear by writing 1)
 50a:	5e 9a       	sbi	0x0b, 6	; 11
				UDR = *cur;          // Send!
 50c:	e0 91 92 00 	lds	r30, 0x0092
 510:	f0 91 93 00 	lds	r31, 0x0093
 514:	80 81       	ld	r24, Z
 516:	8c b9       	out	0x0c, r24	; 12
				cur++;
 518:	80 91 92 00 	lds	r24, 0x0092
 51c:	90 91 93 00 	lds	r25, 0x0093
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	90 93 93 00 	sts	0x0093, r25
 526:	80 93 92 00 	sts	0x0092, r24
 52a:	08 95       	ret
			}
		}
		else
		{
			// no
			uFlags.TX = 0;
 52c:	e1 eb       	ldi	r30, 0xB1	; 177
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	8f 77       	andi	r24, 0x7F	; 127
 534:	80 83       	st	Z, r24
 536:	08 95       	ret
		}
	}
	else // We have nothing to send.
	{
		// Do we want to change bps?
		if(uFlags.change_bps)
 538:	85 ff       	sbrs	r24, 5
 53a:	0c c0       	rjmp	.+24     	; 0x554 <TX_handler+0xc8>
		{
			if( UCSRA & (1<<TXC) ) // Transmission complete?
 53c:	5e 9b       	sbis	0x0b, 6	; 11
 53e:	0a c0       	rjmp	.+20     	; 0x554 <TX_handler+0xc8>
			{
				// Yes
				// We are now allowed to change BPS
				uFlags.change_bps = 0;
 540:	e1 eb       	ldi	r30, 0xB1	; 177
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	8f 7d       	andi	r24, 0xDF	; 223
 548:	80 83       	st	Z, r24
				setup_usart(bps_index);
 54a:	80 91 96 00 	lds	r24, 0x0096
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	fd dd       	rcall	.-1030   	; 0x14c <setup_usart>
				UCSRA |= (1<<TXC);  // Not needed? Probably not.
 552:	5e 9a       	sbi	0x0b, 6	; 11
 554:	08 95       	ret

00000556 <MSG_handler>:
}



void MSG_handler(void)
{
 556:	cf 92       	push	r12
 558:	df 92       	push	r13
 55a:	ef 92       	push	r14
 55c:	ff 92       	push	r15
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
	if(uFlags.exec_CMD)
 566:	80 91 b1 00 	lds	r24, 0x00B1
 56a:	80 ff       	sbrs	r24, 0
 56c:	1f c1       	rjmp	.+574    	; 0x7ac <MSG_handler+0x256>
	{
		uFlags.exec_CMD = 0;
 56e:	e1 eb       	ldi	r30, 0xB1	; 177
 570:	f0 e0       	ldi	r31, 0x00	; 0
		uFlags.run_test = 0;        //Always stop servo test when receiving a valid or invalid cmd.
 572:	8e 7f       	andi	r24, 0xFE	; 254
 574:	8f 7e       	andi	r24, 0xEF	; 239
 576:	80 83       	st	Z, r24


		if(cmd[1] == 't')            // "st" - Servo Test
 578:	80 91 bc 00 	lds	r24, 0x00BC
 57c:	84 37       	cpi	r24, 0x74	; 116
 57e:	29 f4       	brne	.+10     	; 0x58a <MSG_handler+0x34>
		{
			uFlags.run_test = 1;
 580:	80 81       	ld	r24, Z
			uFlags.send_ACK = 1;
 582:	80 61       	ori	r24, 0x10	; 16
 584:	82 60       	ori	r24, 0x02	; 2
 586:	80 83       	st	Z, r24
 588:	11 c1       	rjmp	.+546    	; 0x7ac <MSG_handler+0x256>
		}
			
		else if(cmd[1] == 'a' && cmd[2] == 'v')        // "sav" - Servo All Velocity, has 8 parameters, speed
 58a:	81 36       	cpi	r24, 0x61	; 97
 58c:	09 f0       	breq	.+2      	; 0x590 <MSG_handler+0x3a>
 58e:	50 c0       	rjmp	.+160    	; 0x630 <MSG_handler+0xda>
 590:	80 91 bd 00 	lds	r24, 0x00BD
 594:	86 37       	cpi	r24, 0x76	; 118
 596:	91 f4       	brne	.+36     	; 0x5bc <MSG_handler+0x66>
 598:	e0 ea       	ldi	r30, 0xA0	; 160
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	a7 e9       	ldi	r26, 0x97	; 151
 59e:	b0 e0       	ldi	r27, 0x00	; 0
 5a0:	20 eb       	ldi	r18, 0xB0	; 176
 5a2:	30 e0       	ldi	r19, 0x00	; 0
		{
			unsigned char i;
			for(i=0;i<8;i++)
			servo_step[i] = (unsigned char)param[i];
 5a4:	80 81       	ld	r24, Z
 5a6:	32 96       	adiw	r30, 0x02	; 2
 5a8:	8d 93       	st	X+, r24
		}
			
		else if(cmd[1] == 'a' && cmd[2] == 'v')        // "sav" - Servo All Velocity, has 8 parameters, speed
		{
			unsigned char i;
			for(i=0;i<8;i++)
 5aa:	e2 17       	cp	r30, r18
 5ac:	f3 07       	cpc	r31, r19
 5ae:	d1 f7       	brne	.-12     	; 0x5a4 <MSG_handler+0x4e>
			servo_step[i] = (unsigned char)param[i];
			
			uFlags.send_ACK = 1;
 5b0:	e1 eb       	ldi	r30, 0xB1	; 177
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	82 60       	ori	r24, 0x02	; 2
 5b8:	80 83       	st	Z, r24
			uFlags.run_test = 1;
			uFlags.send_ACK = 1;
		}
			
		else if(cmd[1] == 'a' && cmd[2] == 'v')        // "sav" - Servo All Velocity, has 8 parameters, speed
		{
 5ba:	f8 c0       	rjmp	.+496    	; 0x7ac <MSG_handler+0x256>
 5bc:	0f 2e       	mov	r0, r31
 5be:	f7 e9       	ldi	r31, 0x97	; 151
 5c0:	cf 2e       	mov	r12, r31
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	df 2e       	mov	r13, r31
 5c6:	f0 2d       	mov	r31, r0
 5c8:	0f 2e       	mov	r0, r31
 5ca:	f0 ea       	ldi	r31, 0xA0	; 160
 5cc:	ef 2e       	mov	r14, r31
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	ff 2e       	mov	r15, r31
 5d2:	f0 2d       	mov	r31, r0
 5d4:	03 e7       	ldi	r16, 0x73	; 115
 5d6:	10 e0       	ldi	r17, 0x00	; 0
		{
			uFlags.run_test = 1;
			uFlags.send_ACK = 1;
		}
			
		else if(cmd[1] == 'a' && cmd[2] == 'v')        // "sav" - Servo All Velocity, has 8 parameters, speed
 5d8:	c0 e0       	ldi	r28, 0x00	; 0
 5da:	d0 e0       	ldi	r29, 0x00	; 0
				//PORTD = 0xff;
			//}

			for(i=0;i<8;i++)
			{
				if(servo_step[i] == 0)
 5dc:	f6 01       	movw	r30, r12
 5de:	81 91       	ld	r24, Z+
 5e0:	6f 01       	movw	r12, r30
 5e2:	81 11       	cpse	r24, r1
 5e4:	0f c0       	rjmp	.+30     	; 0x604 <MSG_handler+0xae>
				servo_target[i] = servo[i] = promille_to_timer(param[i]);
 5e6:	f7 01       	movw	r30, r14
 5e8:	80 81       	ld	r24, Z
 5ea:	91 81       	ldd	r25, Z+1	; 0x01
 5ec:	d5 dd       	rcall	.-1110   	; 0x198 <promille_to_timer>
 5ee:	fe 01       	movw	r30, r28
 5f0:	ee 0f       	add	r30, r30
 5f2:	ff 1f       	adc	r31, r31
 5f4:	ed 59       	subi	r30, 0x9D	; 157
 5f6:	ff 4f       	sbci	r31, 0xFF	; 255
 5f8:	91 83       	std	Z+1, r25	; 0x01
 5fa:	80 83       	st	Z, r24
 5fc:	f8 01       	movw	r30, r16
 5fe:	91 83       	std	Z+1, r25	; 0x01
 600:	80 83       	st	Z, r24
 602:	07 c0       	rjmp	.+14     	; 0x612 <MSG_handler+0xbc>
				else
				servo_target[i] = promille_to_timer(param[i]);
 604:	f7 01       	movw	r30, r14
 606:	80 81       	ld	r24, Z
 608:	91 81       	ldd	r25, Z+1	; 0x01
 60a:	c6 dd       	rcall	.-1140   	; 0x198 <promille_to_timer>
 60c:	f8 01       	movw	r30, r16
 60e:	91 83       	std	Z+1, r25	; 0x01
 610:	80 83       	st	Z, r24
 612:	21 96       	adiw	r28, 0x01	; 1
 614:	f2 e0       	ldi	r31, 0x02	; 2
 616:	ef 0e       	add	r14, r31
 618:	f1 1c       	adc	r15, r1
 61a:	0e 5f       	subi	r16, 0xFE	; 254
 61c:	1f 4f       	sbci	r17, 0xFF	; 255
			//if(param[0] == 100 && param[1] == -100)
			//{
				//PORTD = 0xff;
			//}

			for(i=0;i<8;i++)
 61e:	c8 30       	cpi	r28, 0x08	; 8
 620:	d1 05       	cpc	r29, r1
 622:	e1 f6       	brne	.-72     	; 0x5dc <MSG_handler+0x86>
				servo_target[i] = servo[i] = promille_to_timer(param[i]);
				else
				servo_target[i] = promille_to_timer(param[i]);
			}

			uFlags.send_ACK = 1;
 624:	e1 eb       	ldi	r30, 0xB1	; 177
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	82 60       	ori	r24, 0x02	; 2
 62c:	80 83       	st	Z, r24
 62e:	be c0       	rjmp	.+380    	; 0x7ac <MSG_handler+0x256>
		}
		else if(((unsigned char)(cmd[1]-'0')) < 8)    // "s0", "s1" ... "s7" - Servo N, has 1 or 2 parameter, position and speed.
 630:	c0 ed       	ldi	r28, 0xD0	; 208
 632:	c8 0f       	add	r28, r24
 634:	c8 30       	cpi	r28, 0x08	; 8
 636:	18 f5       	brcc	.+70     	; 0x67e <MSG_handler+0x128>
		{
			unsigned char tmp;
			unsigned char whatservo = (cmd[1]-'0');

			servo_target[whatservo] = promille_to_timer(param[0]);  // Position in parameter 0
 638:	d0 e0       	ldi	r29, 0x00	; 0
 63a:	00 ea       	ldi	r16, 0xA0	; 160
 63c:	10 e0       	ldi	r17, 0x00	; 0
 63e:	f8 01       	movw	r30, r16
 640:	80 81       	ld	r24, Z
 642:	91 81       	ldd	r25, Z+1	; 0x01
 644:	a9 dd       	rcall	.-1198   	; 0x198 <promille_to_timer>
 646:	9c 01       	movw	r18, r24
 648:	fe 01       	movw	r30, r28
 64a:	ee 0f       	add	r30, r30
 64c:	ff 1f       	adc	r31, r31
 64e:	ed 58       	subi	r30, 0x8D	; 141
 650:	ff 4f       	sbci	r31, 0xFF	; 255
 652:	91 83       	std	Z+1, r25	; 0x01
 654:	80 83       	st	Z, r24
			tmp = (unsigned char)param[1];                          // Speed in parameter 1 (0 == as fast as possible)
 656:	f8 01       	movw	r30, r16
 658:	92 81       	ldd	r25, Z+2	; 0x02

			if(tmp == 0)
 65a:	91 11       	cpse	r25, r1
 65c:	07 c0       	rjmp	.+14     	; 0x66c <MSG_handler+0x116>
			{
				servo[whatservo] = servo_target[whatservo];
 65e:	cc 0f       	add	r28, r28
 660:	dd 1f       	adc	r29, r29
 662:	cd 59       	subi	r28, 0x9D	; 157
 664:	df 4f       	sbci	r29, 0xFF	; 255
 666:	39 83       	std	Y+1, r19	; 0x01
 668:	28 83       	st	Y, r18
 66a:	03 c0       	rjmp	.+6      	; 0x672 <MSG_handler+0x11c>
			}
			else
			{
				//
				servo_step[whatservo] = tmp;
 66c:	c9 56       	subi	r28, 0x69	; 105
 66e:	df 4f       	sbci	r29, 0xFF	; 255
 670:	98 83       	st	Y, r25
			}

			uFlags.send_ACK = 1;
 672:	e1 eb       	ldi	r30, 0xB1	; 177
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	80 81       	ld	r24, Z
 678:	82 60       	ori	r24, 0x02	; 2
 67a:	80 83       	st	Z, r24
 67c:	97 c0       	rjmp	.+302    	; 0x7ac <MSG_handler+0x256>
		}
		else if(cmd[1] == 'i' && cmd[2] == 'a')      // "sia" - Servo Init All, has 8 parameters, positions.
 67e:	89 36       	cpi	r24, 0x69	; 105
 680:	e9 f4       	brne	.+58     	; 0x6bc <MSG_handler+0x166>
 682:	80 91 bd 00 	lds	r24, 0x00BD
 686:	81 36       	cpi	r24, 0x61	; 97
 688:	09 f0       	breq	.+2      	; 0x68c <MSG_handler+0x136>
 68a:	8b c0       	rjmp	.+278    	; 0x7a2 <MSG_handler+0x24c>
 68c:	00 ea       	ldi	r16, 0xA0	; 160
 68e:	10 e0       	ldi	r17, 0x00	; 0
 690:	c0 e0       	ldi	r28, 0x00	; 0
 692:	d0 e0       	ldi	r29, 0x00	; 0
		{
			unsigned char i;

			for(i=0;i<8;i++)
			{
				eeprom_write_word((void *)(i<<1), promille_to_timer(param[i]));
 694:	f8 01       	movw	r30, r16
 696:	81 91       	ld	r24, Z+
 698:	91 91       	ld	r25, Z+
 69a:	8f 01       	movw	r16, r30
 69c:	7d dd       	rcall	.-1286   	; 0x198 <promille_to_timer>
 69e:	bc 01       	movw	r22, r24
 6a0:	ce 01       	movw	r24, r28
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	fa d0       	rcall	.+500    	; 0x89c <eeprom_write_word>
 6a8:	21 96       	adiw	r28, 0x01	; 1
		}
		else if(cmd[1] == 'i' && cmd[2] == 'a')      // "sia" - Servo Init All, has 8 parameters, positions.
		{
			unsigned char i;

			for(i=0;i<8;i++)
 6aa:	c8 30       	cpi	r28, 0x08	; 8
 6ac:	d1 05       	cpc	r29, r1
 6ae:	91 f7       	brne	.-28     	; 0x694 <MSG_handler+0x13e>
			{
				eeprom_write_word((void *)(i<<1), promille_to_timer(param[i]));
			}
			uFlags.send_ACK = 1;
 6b0:	e1 eb       	ldi	r30, 0xB1	; 177
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	82 60       	ori	r24, 0x02	; 2
 6b8:	80 83       	st	Z, r24
			}

			uFlags.send_ACK = 1;
		}
		else if(cmd[1] == 'i' && cmd[2] == 'a')      // "sia" - Servo Init All, has 8 parameters, positions.
		{
 6ba:	78 c0       	rjmp	.+240    	; 0x7ac <MSG_handler+0x256>
			{
				eeprom_write_word((void *)(i<<1), promille_to_timer(param[i]));
			}
			uFlags.send_ACK = 1;
		}
		else if(cmd[1] == 'b' && cmd[2] == 'r')      // "sbr" - Servo (set) Bit Rate, has one parameter 0-6.
 6bc:	82 36       	cpi	r24, 0x62	; 98
 6be:	81 f4       	brne	.+32     	; 0x6e0 <MSG_handler+0x18a>
 6c0:	80 91 bd 00 	lds	r24, 0x00BD
 6c4:	82 37       	cpi	r24, 0x72	; 114
 6c6:	09 f0       	breq	.+2      	; 0x6ca <MSG_handler+0x174>
 6c8:	6c c0       	rjmp	.+216    	; 0x7a2 <MSG_handler+0x24c>
		{
			bps_index = (unsigned char)param[0];
 6ca:	80 91 a0 00 	lds	r24, 0x00A0
 6ce:	80 93 96 00 	sts	0x0096, r24
			uFlags.change_bps = 1;
 6d2:	e1 eb       	ldi	r30, 0xB1	; 177
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
			uFlags.send_ACK = 1;
 6d8:	80 62       	ori	r24, 0x20	; 32
 6da:	82 60       	ori	r24, 0x02	; 2
 6dc:	80 83       	st	Z, r24
 6de:	66 c0       	rjmp	.+204    	; 0x7ac <MSG_handler+0x256>
		}
		else if(cmd[1] == 'n')    // "sn" - Servo versioN.
 6e0:	8e 36       	cpi	r24, 0x6E	; 110
 6e2:	31 f4       	brne	.+12     	; 0x6f0 <MSG_handler+0x19a>
		{
			uFlags.send_VER = 1;
 6e4:	e1 eb       	ldi	r30, 0xB1	; 177
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	80 81       	ld	r24, Z
 6ea:	88 60       	ori	r24, 0x08	; 8
 6ec:	80 83       	st	Z, r24
 6ee:	5e c0       	rjmp	.+188    	; 0x7ac <MSG_handler+0x256>
		}
		else if(cmd[1] == 'd')    // "sd" - Servo Disable
 6f0:	84 36       	cpi	r24, 0x64	; 100
 6f2:	61 f4       	brne	.+24     	; 0x70c <MSG_handler+0x1b6>
		{
			uFlags.outputenabled = FALSE;
 6f4:	e2 eb       	ldi	r30, 0xB2	; 178
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
			uFlags.changeoutput = TRUE;
 6fa:	8d 7f       	andi	r24, 0xFD	; 253
 6fc:	81 60       	ori	r24, 0x01	; 1
 6fe:	80 83       	st	Z, r24
			uFlags.send_ACK = TRUE;
 700:	e1 eb       	ldi	r30, 0xB1	; 177
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	80 81       	ld	r24, Z
 706:	82 60       	ori	r24, 0x02	; 2
 708:	80 83       	st	Z, r24
 70a:	50 c0       	rjmp	.+160    	; 0x7ac <MSG_handler+0x256>
			
			//PORTD = 0x00;
		}
		else if(cmd[1] == 'e')    // "se" - Servo Enable
 70c:	85 36       	cpi	r24, 0x65	; 101
 70e:	61 f4       	brne	.+24     	; 0x728 <MSG_handler+0x1d2>
		{
			uFlags.outputenabled = TRUE;
 710:	e2 eb       	ldi	r30, 0xB2	; 178
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
			uFlags.changeoutput = TRUE;
 716:	82 60       	ori	r24, 0x02	; 2
 718:	81 60       	ori	r24, 0x01	; 1
 71a:	80 83       	st	Z, r24
			uFlags.send_ACK = TRUE;
 71c:	e1 eb       	ldi	r30, 0xB1	; 177
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	80 81       	ld	r24, Z
 722:	82 60       	ori	r24, 0x02	; 2
 724:	80 83       	st	Z, r24
 726:	42 c0       	rjmp	.+132    	; 0x7ac <MSG_handler+0x256>
		}
		else if(cmd[1] == 'o')    // "so" - (Servo) Output
 728:	8f 36       	cpi	r24, 0x6F	; 111
 72a:	d9 f5       	brne	.+118    	; 0x7a2 <MSG_handler+0x24c>
			unsigned char tmp;
			
			for(i=0;i<=1;i++)
			{
				tmp = param[i];
				if(tmp)
 72c:	80 91 a0 00 	lds	r24, 0x00A0
 730:	81 11       	cpse	r24, r1
 732:	02 c0       	rjmp	.+4      	; 0x738 <MSG_handler+0x1e2>
				{
					PORTC |= (1 << (i+4));
				}
				else
				{
					PORTC &= ~(1 << (i+4));
 734:	ac 98       	cbi	0x15, 4	; 21
 736:	01 c0       	rjmp	.+2      	; 0x73a <MSG_handler+0x1e4>
			for(i=0;i<=1;i++)
			{
				tmp = param[i];
				if(tmp)
				{
					PORTC |= (1 << (i+4));
 738:	ac 9a       	sbi	0x15, 4	; 21
			unsigned char tmp;
			
			for(i=0;i<=1;i++)
			{
				tmp = param[i];
				if(tmp)
 73a:	80 91 a2 00 	lds	r24, 0x00A2
 73e:	88 23       	and	r24, r24
 740:	11 f0       	breq	.+4      	; 0x746 <MSG_handler+0x1f0>
				{
					PORTC |= (1 << (i+4));
 742:	ad 9a       	sbi	0x15, 5	; 21
 744:	01 c0       	rjmp	.+2      	; 0x748 <MSG_handler+0x1f2>
				}
				else
				{
					PORTC &= ~(1 << (i+4));
 746:	ad 98       	cbi	0x15, 5	; 21
 748:	e4 ea       	ldi	r30, 0xA4	; 164
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	6c ea       	ldi	r22, 0xAC	; 172
 74e:	70 e0       	ldi	r23, 0x00	; 0
				servo_step[whatservo] = tmp;
			}

			uFlags.send_ACK = 1;
		}
		else if(cmd[1] == 'i' && cmd[2] == 'a')      // "sia" - Servo Init All, has 8 parameters, positions.
 750:	82 e0       	ldi	r24, 0x02	; 2
 752:	90 e0       	ldi	r25, 0x00	; 0
				{
					PORTB |= (1 << i);  // Port pins happens to match i
				}
				else
				{
					PORTB &= ~(1 << i); // Port pins happens to match i
 754:	a1 e0       	ldi	r26, 0x01	; 1
 756:	b0 e0       	ldi	r27, 0x00	; 0
				}

			}
			for(i=2;i<=5;i++)
			{
				tmp = param[i];
 758:	20 81       	ld	r18, Z
 75a:	32 96       	adiw	r30, 0x02	; 2
				if(tmp)
 75c:	22 23       	and	r18, r18
 75e:	59 f0       	breq	.+22     	; 0x776 <MSG_handler+0x220>
				{
					PORTB |= (1 << i);  // Port pins happens to match i
 760:	48 b3       	in	r20, 0x18	; 24
 762:	9d 01       	movw	r18, r26
 764:	08 2e       	mov	r0, r24
 766:	02 c0       	rjmp	.+4      	; 0x76c <MSG_handler+0x216>
 768:	22 0f       	add	r18, r18
 76a:	33 1f       	adc	r19, r19
 76c:	0a 94       	dec	r0
 76e:	e2 f7       	brpl	.-8      	; 0x768 <MSG_handler+0x212>
 770:	24 2b       	or	r18, r20
 772:	28 bb       	out	0x18, r18	; 24
 774:	0c c0       	rjmp	.+24     	; 0x78e <MSG_handler+0x238>
				}
				else
				{
					PORTB &= ~(1 << i); // Port pins happens to match i
 776:	38 b3       	in	r19, 0x18	; 24
 778:	ad 01       	movw	r20, r26
 77a:	08 2e       	mov	r0, r24
 77c:	02 c0       	rjmp	.+4      	; 0x782 <MSG_handler+0x22c>
 77e:	44 0f       	add	r20, r20
 780:	55 1f       	adc	r21, r21
 782:	0a 94       	dec	r0
 784:	e2 f7       	brpl	.-8      	; 0x77e <MSG_handler+0x228>
 786:	24 2f       	mov	r18, r20
 788:	20 95       	com	r18
 78a:	23 23       	and	r18, r19
 78c:	28 bb       	out	0x18, r18	; 24
 78e:	01 96       	adiw	r24, 0x01	; 1
				{
					PORTC &= ~(1 << (i+4));
				}

			}
			for(i=2;i<=5;i++)
 790:	e6 17       	cp	r30, r22
 792:	f7 07       	cpc	r31, r23
 794:	09 f7       	brne	.-62     	; 0x758 <MSG_handler+0x202>
					PORTB &= ~(1 << i); // Port pins happens to match i
				}
				
			}
			
			uFlags.send_ACK = TRUE;
 796:	e1 eb       	ldi	r30, 0xB1	; 177
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	80 81       	ld	r24, Z
 79c:	82 60       	ori	r24, 0x02	; 2
 79e:	80 83       	st	Z, r24
 7a0:	05 c0       	rjmp	.+10     	; 0x7ac <MSG_handler+0x256>
		}
		else
		{
			uFlags.send_NACK = 1;
 7a2:	e1 eb       	ldi	r30, 0xB1	; 177
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z
 7a8:	84 60       	ori	r24, 0x04	; 4
 7aa:	80 83       	st	Z, r24
		}
	}
}
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	1f 91       	pop	r17
 7b2:	0f 91       	pop	r16
 7b4:	ff 90       	pop	r15
 7b6:	ef 90       	pop	r14
 7b8:	df 90       	pop	r13
 7ba:	cf 90       	pop	r12
 7bc:	08 95       	ret

000007be <main>:



int main(void)
{
	uFlags.ucAll = 0;    // Clear all flags
 7be:	10 92 b2 00 	sts	0x00B2, r1
 7c2:	10 92 b1 00 	sts	0x00B1, r1

	// 0xFFFF can never be a real value, assume eeprom is not initialized.
	if(eeprom_read_word((void *)0) != 0xFFFF)
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	63 d0       	rcall	.+198    	; 0x892 <eeprom_read_word>
 7cc:	01 96       	adiw	r24, 0x01	; 1
 7ce:	81 f0       	breq	.+32     	; 0x7f0 <main+0x32>
 7d0:	c0 e0       	ldi	r28, 0x00	; 0
 7d2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		unsigned char i;
		for(i=0;i<8;i++)
		{
			servo[i] = eeprom_read_word((void *)(i<<1));
 7d4:	8e 01       	movw	r16, r28
 7d6:	00 0f       	add	r16, r16
 7d8:	11 1f       	adc	r17, r17
 7da:	c8 01       	movw	r24, r16
 7dc:	5a d0       	rcall	.+180    	; 0x892 <eeprom_read_word>
 7de:	f8 01       	movw	r30, r16
 7e0:	ed 59       	subi	r30, 0x9D	; 157
 7e2:	ff 4f       	sbci	r31, 0xFF	; 255
 7e4:	91 83       	std	Z+1, r25	; 0x01
 7e6:	80 83       	st	Z, r24
 7e8:	21 96       	adiw	r28, 0x01	; 1

	// 0xFFFF can never be a real value, assume eeprom is not initialized.
	if(eeprom_read_word((void *)0) != 0xFFFF)
	{
		unsigned char i;
		for(i=0;i<8;i++)
 7ea:	c8 30       	cpi	r28, 0x08	; 8
 7ec:	d1 05       	cpc	r29, r1
 7ee:	91 f7       	brne	.-28     	; 0x7d4 <main+0x16>
	}
	

	//PORTS

	DDRC =  0x03;          // PortC Pin 0 and 1 is servo out.
 7f0:	83 e0       	ldi	r24, 0x03	; 3
 7f2:	84 bb       	out	0x14, r24	; 20
	DDRC |= 0x08;          // PortC Pin 3 is 741 disable.
 7f4:	a3 9a       	sbi	0x14, 3	; 20
	DDRC |= 0x30;          // PortC Pin 4 and 5 output for pin 2 and 3 of extra connector.
 7f6:	84 b3       	in	r24, 0x14	; 20
 7f8:	80 63       	ori	r24, 0x30	; 48
 7fa:	84 bb       	out	0x14, r24	; 20
	
	DDRB =  0x3C;          // PortB Pin 2..5 output for pin 4..7 of extra connector.
 7fc:	8c e3       	ldi	r24, 0x3C	; 60
 7fe:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;          //
 800:	18 ba       	out	0x18, r1	; 24
	
	DDRD = 0xFE;           // Only serial RX pin input on portD.
 802:	8e ef       	ldi	r24, 0xFE	; 254
 804:	81 bb       	out	0x11, r24	; 17
	//DDRD = 0xFF;
	//DDRD = 0x01;

	PORTC = 0x00;          // Enable servo out.
 806:	15 ba       	out	0x15, r1	; 21
	
	//TIMERS

	// 8-bit timer - interval between the eight servo pulses.
	TCCR2 |= _BV(WGM21);  // CTC
 808:	85 b5       	in	r24, 0x25	; 37
 80a:	88 60       	ori	r24, 0x08	; 8
 80c:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= _BV(CS22) |_BV(CS21);   //  clk/256
 80e:	85 b5       	in	r24, 0x25	; 37
 810:	86 60       	ori	r24, 0x06	; 6
 812:	85 bd       	out	0x25, r24	; 37

	// 16-bit timer - length of pulse
	TCCR1B = _BV(CS10);  // clk/1.
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	8e bd       	out	0x2e, r24	; 46

	TIMSK |= (1 << OCIE1A) | (1 << OCIE2);   //Enable interrupt for CompareA-match for timer 1 and 2.
 818:	89 b7       	in	r24, 0x39	; 57
 81a:	80 69       	ori	r24, 0x90	; 144
 81c:	89 bf       	out	0x39, r24	; 57

	OCR2  = 39;   // Makes pulse starting interrupt run ~8 times per 20ms  (Timer 0)
 81e:	87 e2       	ldi	r24, 0x27	; 39
 820:	83 bd       	out	0x23, r24	; 35

	// 8-bit timer - for main-loop timing.
	
	TCCR0 |=  _BV(CS02);  // start counting att 15625 Hz
 822:	83 b7       	in	r24, 0x33	; 51
 824:	84 60       	ori	r24, 0x04	; 4
 826:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
 828:	12 be       	out	0x32, r1	; 50
	
	// UART

	UCSRA |= (1<<TXC);  // Clear TX complete.
 82a:	5e 9a       	sbi	0x0b, 6	; 11


	//상수 값이 잘못 설정되어 있음
	//USART_BSP_38400이 9600으로 동작하는 모드임
	setup_usart(USART_BPS_38400);
 82c:	82 e0       	ldi	r24, 0x02	; 2
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	8d dc       	rcall	.-1766   	; 0x14c <setup_usart>
	
	sei();
 832:	78 94       	sei
	
	uFlags.exec_CMD = 0;
 834:	e1 eb       	ldi	r30, 0xB1	; 177
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	8e 7f       	andi	r24, 0xFE	; 254
 83c:	80 83       	st	Z, r24

	while(1)
	{
		RX_handler();
 83e:	86 dd       	rcall	.-1268   	; 0x34c <RX_handler>
		MSG_handler();
 840:	8a de       	rcall	.-748    	; 0x556 <MSG_handler>
		TX_handler();
 842:	24 de       	rcall	.-952    	; 0x48c <TX_handler>
		Process_handler();
 844:	ba dc       	rcall	.-1676   	; 0x1ba <Process_handler>
	}
 846:	fb cf       	rjmp	.-10     	; 0x83e <main+0x80>

00000848 <atoi>:
 848:	fc 01       	movw	r30, r24
 84a:	88 27       	eor	r24, r24
 84c:	99 27       	eor	r25, r25
 84e:	e8 94       	clt
 850:	21 91       	ld	r18, Z+
 852:	20 32       	cpi	r18, 0x20	; 32
 854:	e9 f3       	breq	.-6      	; 0x850 <atoi+0x8>
 856:	29 30       	cpi	r18, 0x09	; 9
 858:	10 f0       	brcs	.+4      	; 0x85e <atoi+0x16>
 85a:	2e 30       	cpi	r18, 0x0E	; 14
 85c:	c8 f3       	brcs	.-14     	; 0x850 <atoi+0x8>
 85e:	2b 32       	cpi	r18, 0x2B	; 43
 860:	39 f0       	breq	.+14     	; 0x870 <atoi+0x28>
 862:	2d 32       	cpi	r18, 0x2D	; 45
 864:	31 f4       	brne	.+12     	; 0x872 <atoi+0x2a>
 866:	68 94       	set
 868:	03 c0       	rjmp	.+6      	; 0x870 <atoi+0x28>
 86a:	0b d0       	rcall	.+22     	; 0x882 <__mulhi_const_10>
 86c:	82 0f       	add	r24, r18
 86e:	91 1d       	adc	r25, r1
 870:	21 91       	ld	r18, Z+
 872:	20 53       	subi	r18, 0x30	; 48
 874:	2a 30       	cpi	r18, 0x0A	; 10
 876:	c8 f3       	brcs	.-14     	; 0x86a <atoi+0x22>
 878:	1e f4       	brtc	.+6      	; 0x880 <atoi+0x38>
 87a:	90 95       	com	r25
 87c:	81 95       	neg	r24
 87e:	9f 4f       	sbci	r25, 0xFF	; 255
 880:	08 95       	ret

00000882 <__mulhi_const_10>:
 882:	7a e0       	ldi	r23, 0x0A	; 10
 884:	97 9f       	mul	r25, r23
 886:	90 2d       	mov	r25, r0
 888:	87 9f       	mul	r24, r23
 88a:	80 2d       	mov	r24, r0
 88c:	91 0d       	add	r25, r1
 88e:	11 24       	eor	r1, r1
 890:	08 95       	ret

00000892 <eeprom_read_word>:
 892:	a8 e1       	ldi	r26, 0x18	; 24
 894:	b0 e0       	ldi	r27, 0x00	; 0
 896:	42 e0       	ldi	r20, 0x02	; 2
 898:	50 e0       	ldi	r21, 0x00	; 0
 89a:	05 c0       	rjmp	.+10     	; 0x8a6 <eeprom_read_blraw>

0000089c <eeprom_write_word>:
 89c:	12 d0       	rcall	.+36     	; 0x8c2 <eeprom_write_byte>
 89e:	27 2f       	mov	r18, r23
 8a0:	11 c0       	rjmp	.+34     	; 0x8c4 <eeprom_write_r18>

000008a2 <eeprom_read_block>:
 8a2:	dc 01       	movw	r26, r24
 8a4:	cb 01       	movw	r24, r22

000008a6 <eeprom_read_blraw>:
 8a6:	fc 01       	movw	r30, r24
 8a8:	e1 99       	sbic	0x1c, 1	; 28
 8aa:	fe cf       	rjmp	.-4      	; 0x8a8 <eeprom_read_blraw+0x2>
 8ac:	06 c0       	rjmp	.+12     	; 0x8ba <eeprom_read_blraw+0x14>
 8ae:	ff bb       	out	0x1f, r31	; 31
 8b0:	ee bb       	out	0x1e, r30	; 30
 8b2:	e0 9a       	sbi	0x1c, 0	; 28
 8b4:	31 96       	adiw	r30, 0x01	; 1
 8b6:	0d b2       	in	r0, 0x1d	; 29
 8b8:	0d 92       	st	X+, r0
 8ba:	41 50       	subi	r20, 0x01	; 1
 8bc:	50 40       	sbci	r21, 0x00	; 0
 8be:	b8 f7       	brcc	.-18     	; 0x8ae <eeprom_read_blraw+0x8>
 8c0:	08 95       	ret

000008c2 <eeprom_write_byte>:
 8c2:	26 2f       	mov	r18, r22

000008c4 <eeprom_write_r18>:
 8c4:	e1 99       	sbic	0x1c, 1	; 28
 8c6:	fe cf       	rjmp	.-4      	; 0x8c4 <eeprom_write_r18>
 8c8:	9f bb       	out	0x1f, r25	; 31
 8ca:	8e bb       	out	0x1e, r24	; 30
 8cc:	2d bb       	out	0x1d, r18	; 29
 8ce:	0f b6       	in	r0, 0x3f	; 63
 8d0:	f8 94       	cli
 8d2:	e2 9a       	sbi	0x1c, 2	; 28
 8d4:	e1 9a       	sbi	0x1c, 1	; 28
 8d6:	0f be       	out	0x3f, r0	; 63
 8d8:	01 96       	adiw	r24, 0x01	; 1
 8da:	08 95       	ret

000008dc <_exit>:
 8dc:	f8 94       	cli

000008de <__stop_program>:
 8de:	ff cf       	rjmp	.-2      	; 0x8de <__stop_program>
